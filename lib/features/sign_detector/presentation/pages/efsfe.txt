// lib/features/sign_detector/presentation/pages/scanner_page.dart

import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:glassmorphism/glassmorphism.dart';
import 'package:hand_landmarker/hand_landmarker.dart'; // Untuk objek Hand dan Landmark
import 'package:isibi_app/core/services/hand_landmarker_service.dart';
import 'package:isibi_app/core/services/prediction_services.dart';
import 'package:isibi_app/core/services/tflite_service.dart';

// Asumsikan Anda memiliki painter ini untuk menggambar landmark
import '../widgets/landmark_painter.dart';

class ScannerPage extends StatefulWidget {
  const ScannerPage({super.key});

  @override
  State<ScannerPage> createState() => _ScannerPageState();
}

class _ScannerPageState extends State<ScannerPage> {
  // Controller & State Management
  CameraController? _cameraController;
  bool _isCameraInitialized = false;
  bool _isProcessing = false;

  // Inisialisasi Services
  final HandLandmarkerService _handLandmarkerService = HandLandmarkerService();
  final TFLiteService _tfliteService = TFLiteService();
  final PredictionService _predictionService = PredictionService();

  // Variabel untuk menampilkan hasil di UI
  List<Hand> _detectedHands = [];
  String? _currentPrediction;
  String _currentSentence = "";

  @override
  void initState() {
    super.initState();
    _initializeAllServices();
  }

  Future<void> _initializeAllServices() async {
    await _handLandmarkerService.initialize();
    await _tfliteService.loadModel();
    _initializeCamera();
  }

  Future<void> _initializeCamera() async {
    final cameras = await availableCameras();
    final frontCamera = cameras.firstWhere(
      (camera) => camera.lensDirection == CameraLensDirection.front,
      orElse: () => cameras.first,
    );

    _cameraController = CameraController(
      frontCamera,
      ResolutionPreset.medium,
      enableAudio: false,
    );
    await _cameraController!.initialize();
    if (!mounted) return;

    setState(() {
      _isCameraInitialized = true;
    });

    _cameraController!.startImageStream((image) {
      if (_isProcessing) return;
      _isProcessing = true;

      _handLandmarkerService
          .detect(image, _cameraController!.value.deviceOrientation.index)
          .then((hands) {
            setState(() {
              _detectedHands = hands;
            });

            if (hands.isNotEmpty) {
              final List<double> normalizedLandmarks = _normalizeLandmarks(
                hands.first.landmarks,
              );

              if (normalizedLandmarks.length == 42) {
                _tfliteService.runInference(normalizedLandmarks).then((
                  prediction,
                ) {
                  if (prediction != null) {
                    _predictionService.addCharacter(prediction);
                    if (mounted) {
                      setState(() {
                        _currentPrediction = prediction;
                        _currentSentence = _predictionService.currentSentence;
                      });
                    }
                  }
                });
              }
            }
          })
          .whenComplete(() {
            if (mounted) {
              _isProcessing = false;
            }
          });
    });
  }

  List<double> _normalizeLandmarks(List<Landmark> landmarks) {
    if (landmarks.isEmpty) return [];
    final wrist = landmarks[0];
    List<double> normalized = [];
    for (var landmark in landmarks) {
      normalized.add(landmark.x - wrist.x);
      normalized.add(landmark.y - wrist.y);
    }
    return normalized;
  }

  @override
  void dispose() {
    _cameraController?.stopImageStream();
    _cameraController?.dispose();
    _handLandmarkerService.dispose();
    _tfliteService.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          if (_isCameraInitialized && _cameraController != null)
            Positioned.fill(child: CameraPreview(_cameraController!))
          else
            const Center(child: CircularProgressIndicator()),

          // Painter untuk menggambar kerangka tangan
          CustomPaint(
            size: Size.infinite,
            painter: LandmarkPainter(
              hands: _detectedHands,
              cameraPreviewSize: _cameraController?.value.previewSize,
            ),
          ),

          _buildBackButton(),
          _buildBottomPanel(),
        ],
      ),
    );
  }

  // ... (Kode untuk _buildBackButton dan _buildBottomPanel tetap sama seperti sebelumnya)
  // ...
}
